<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title> - posts</title>
	<link href="https://robyoung.digital/blog/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://robyoung.digital/blog/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-01-15T00:00:00+00:00</updated>
	<id>https://robyoung.digital/blog/atom.xml</id>
	<entry xml:lang="en">
		<title>Create your own certificate authority with openssl - part two</title>
		<published>2020-01-15T00:00:00+00:00</published>
		<updated>2020-01-15T00:00:00+00:00</updated>
		<link href="https://robyoung.digital/blog/ssl-certificate-authority-with-openssl-part-two/" type="text/html"/>
		<id>https://robyoung.digital/blog/ssl-certificate-authority-with-openssl-part-two/</id>
		<content type="html">&lt;p&gt;In the &lt;a href=&quot;&#x2F;blog&#x2F;ssl-certificate-authority-with-openssl&#x2F;&quot;&gt;previous post&lt;&#x2F;a&gt; we
set up certificate authority (CA), installed a CA certificate in our browser and
went through the process of signing and using some server certificates. In this
we&#x27;ll create some client certificates to identify ourselves with our servers.
We&#x27;ll then explore using these in a few different contexts; installing them in
our browser, using them with curl and also with &lt;a href=&quot;http:&#x2F;&#x2F;www.dest-unreach.org&#x2F;socat&#x2F;&quot;&gt;socat&lt;&#x2F;a&gt;.
As with the previous post, you can see it all tied together in this related
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robyoung&#x2F;nginx-client-certs&quot;&gt;github repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This post assumes you have the files generated in the &lt;a href=&quot;&#x2F;blog&#x2F;ssl-certificate-authority-with-openssl&#x2F;&quot;&gt;previous post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;File name&lt;&#x2F;th&gt;&lt;th&gt;Use&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;test-ca.key&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;private key for the CA&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;test-ca.pem&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;root certificate (CA)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;test-server.key&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;private key for the server certificate&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;test-server-*-csr.pem&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;certificate signing requests for server&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;test-server-static-cert.pem&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;static server certificate&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;create-a-client-certificate&quot;&gt;Create a client certificate&lt;&#x2F;h2&gt;
&lt;p&gt;Compared to creating a server certificate, which has lots of options, creating a client
certificate is pretty easy. First we create the private key. Note that if you want the
user to have to provide a password to use this client cert you just need to create a
passworded key and then use &lt;code&gt;passin&lt;&#x2F;code&gt; and &lt;code&gt;passout&lt;&#x2F;code&gt; when converting to PKCS later.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;genrsa -out&lt;&#x2F;span&gt;&lt;span&gt; test-client.key 2048&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we create our certificate signing request. Our subject can be pretty empty for a client
cert.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req -new&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-subj &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;C=GB&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-key&lt;&#x2F;span&gt;&lt;span&gt; test-client.key \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-out&lt;&#x2F;span&gt;&lt;span&gt; test-client.csr&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we create our signed client certificate.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x509&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-req -in&lt;&#x2F;span&gt;&lt;span&gt; test-client.csr \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-passin&lt;&#x2F;span&gt;&lt;span&gt; pass:capassword \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-CA&lt;&#x2F;span&gt;&lt;span&gt; test-ca.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAkey&lt;&#x2F;span&gt;&lt;span&gt; test-ca.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAcreateserial&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-out&lt;&#x2F;span&gt;&lt;span&gt; test-client.crt \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-days&lt;&#x2F;span&gt;&lt;span&gt; 1825&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -sha256&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to use this client certificate in a browser we need to convert it to PKCS.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pkcs12 -export -clcerts&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-in&lt;&#x2F;span&gt;&lt;span&gt; test-client.crt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -inkey&lt;&#x2F;span&gt;&lt;span&gt; test-client.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -out&lt;&#x2F;span&gt;&lt;span&gt; test-client.p12&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The steps to install it in the browser depend on the browser you&#x27;re using. For Firefox
you scroll right to the bottom of the Privacy &amp;amp; Security tab of Preferences. Here click
on View Certificates then Your Certificates and finally Import your .p12 file.&lt;&#x2F;p&gt;
&lt;p&gt;Using the certificate with curl and socat is much simpler. We just need a combined PEM
including the key, certificate and CA certificate.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test-client.key&lt;&#x2F;span&gt;&lt;span&gt; test-client.crt test-ca.pem &amp;gt; test-client.pem&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then this can then be used with curl&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--cacert&lt;&#x2F;span&gt;&lt;span&gt; test-ca.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --cert&lt;&#x2F;span&gt;&lt;span&gt; test-client.pem http:&#x2F;&#x2F;dev.test&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or with socat&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; socat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tcp-listen:8096,fork,bind&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;openssl-connect:dev.test:443,cert&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-client.pem,cafile=test-ca.pem&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;validating-the-client-certificate&quot;&gt;Validating the client certificate&lt;&#x2F;h2&gt;
&lt;p&gt;So far we&#x27;ve created a client certificate and seen how we can use it to talk to
a server. In order to be useful though, this needs to be validated by the server.&lt;&#x2F;p&gt;
&lt;p&gt;Let us extend the &lt;code&gt;nginx.vhost.conf&lt;&#x2F;code&gt; from the previous post. The relevant
options are
&lt;a href=&quot;https:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;http&#x2F;ngx_http_ssl_module.html#ssl_client_certificate&quot;&gt;&lt;code&gt;ssl_client_certificate&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; or
&lt;a href=&quot;https:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;http&#x2F;ngx_http_ssl_module.html#ssl_trusted_certificate&quot;&gt;&lt;code&gt;ssl_trusted_certificate&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;http&#x2F;ngx_http_ssl_module.html#ssl_verify_client&quot;&gt;&lt;code&gt;ssl_verify_client&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;nginx.vhost.conf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nginx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nginx &quot;&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span&gt;server {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  listen 443 ssl;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  server_name dev.test;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ssl_client_certificate &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;certs&#x2F;test-ca.pem;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ssl_verify_client on;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;certs&#x2F;server-crt.pem;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;private&#x2F;server.key;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  location &#x2F; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    return 200 &amp;#39;Static vhost test\n&amp;#39;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Content-Type text&#x2F;plain;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here is the docker command to run it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; docker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--rm -p&lt;&#x2F;span&gt;&lt;span&gt; 443:443 \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;nginx.vhost.conf:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf:ro \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;test-server.key:&#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;private&#x2F;server.key:ro \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;test-server-static-cert.pem:&#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;certs&#x2F;server-crt.pem:ro \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;test-ca.pem:&#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;certs&#x2F;test-ca.pem:ro&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, if you still have all the configuration from the previous post,
we should be able to test it out.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--cacert&lt;&#x2F;span&gt;&lt;span&gt; test-ca.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --cert&lt;&#x2F;span&gt;&lt;span&gt; test-client.pem http:&#x2F;&#x2F;dev.test&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Static&lt;&#x2F;span&gt;&lt;span&gt; vhost test&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or via &lt;code&gt;socat&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;localhost:8096&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Static&lt;&#x2F;span&gt;&lt;span&gt; vhost test&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we&#x27;re all done!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Create your own certificate authority with openssl - part one</title>
		<published>2018-07-31T00:00:00+00:00</published>
		<updated>2018-07-31T00:00:00+00:00</updated>
		<link href="https://robyoung.digital/blog/ssl-certificate-authority-with-openssl/" type="text/html"/>
		<id>https://robyoung.digital/blog/ssl-certificate-authority-with-openssl/</id>
		<content type="html">&lt;p&gt;This post is part one of a series on working with openssl to manage your
own certificate authority (CA) for a couple of different use cases. If you
just want to get a CA up and running for local development I thoroughly
recommend &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;mkcert&quot;&gt;mkcert&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this first part we&#x27;ll create a CA with openssl, install it into our browser
and test it with a local web server. Note that I&#x27;ll be providing all the
information on the command line to make it easier to script things.
To see it all tied together see this related &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robyoung&#x2F;nginx-client-certs&quot;&gt;github repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;create-a-certificate-authority-with-openssl&quot;&gt;Create a certificate authority with OpenSSL&lt;&#x2F;h2&gt;
&lt;p&gt;First we generate the private key for our CA (with a password other than
&#x27;capassword&#x27; preferably, and ensure it&#x27;s not visible in your shell history).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;genrsa -aes256 -passout&lt;&#x2F;span&gt;&lt;span&gt; pass:capassword&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -out&lt;&#x2F;span&gt;&lt;span&gt; test-ca.key 2048&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we generate the root certificate. The fields in the subject name do not
affect the certificate&#x27;s validity. They are queryable and shown when the certificate
is installed (firefox lists them by organisation) so use something that will remind you what it&#x27;s for.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req -x509 -new -nodes&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-passin&lt;&#x2F;span&gt;&lt;span&gt; pass:capassword \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-key&lt;&#x2F;span&gt;&lt;span&gt; test-ca.key \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-sha256 -days&lt;&#x2F;span&gt;&lt;span&gt; 1825 \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-subj &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;C=GB&#x2F;O=robyoung.digital&#x2F;CN=test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-out&lt;&#x2F;span&gt;&lt;span&gt; test-ca.pem&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we&#x27;re done! Next we&#x27;re going to create a server certificate and sign it
with our shiny new CA key.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;create-a-server-certificate&quot;&gt;Create a server certificate&lt;&#x2F;h2&gt;
&lt;p&gt;As with the CA, our first step is to generate a private key for our server.
This time we don&#x27;t want a password otherwise it becomes harder to install.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;genrsa -out&lt;&#x2F;span&gt;&lt;span&gt; test-server.key 2048&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once we have a key we can generate our certificate signing request (CSR),
just like when we&#x27;re using a public CA. This time the common name
is significant as clients will use it to determine whether the server is
authorised to serve that domain.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req -new&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-subj &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;C=GB&#x2F;CN=dev.test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-key&lt;&#x2F;span&gt;&lt;span&gt; test-server.key \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-out&lt;&#x2F;span&gt;&lt;span&gt; test-server-static-csr.pem&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you need to support multiple domains with a single server certificate you
have two options. Wildcard certificates, where you use a star (*) to match a
domain name segment or subject alternative names (SANs).&lt;&#x2F;p&gt;
&lt;p&gt;The wildcard certificate approach is pretty simple.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req -new&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-subj &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;C=GB&#x2F;CN=*.dev.test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-key&lt;&#x2F;span&gt;&lt;span&gt; test-server.key \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-out&lt;&#x2F;span&gt;&lt;span&gt; test-server-wildcard-csr.pem&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Subject alternative names (SAN) is an x509 extension that allows you
to add multiple domains to a single certificate. It is bit more complex
to implement on the command line. This
&lt;a href=&quot;https:&#x2F;&#x2F;security.stackexchange.com&#x2F;a&#x2F;91556&quot;&gt;Stack Exchange answer&lt;&#x2F;a&gt; helped me
figure out how to do it. The path to your &lt;code&gt;openssl.cnf&lt;&#x2F;code&gt; is going to be system
dependent, on Linux it will probably be &lt;code&gt;&#x2F;etc&#x2F;ssl&#x2F;openssl.cnf&lt;&#x2F;code&gt;, however on Mac
(using a homebrew installed openssl) it is at &lt;code&gt;&#x2F;usr&#x2F;local&#x2F;etc&#x2F;openssl&#x2F;openssl.cnf&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req -new&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-subj &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;C=GB&#x2F;CN=dev.test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-key&lt;&#x2F;span&gt;&lt;span&gt; test-server.key \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-out&lt;&#x2F;span&gt;&lt;span&gt; test-server-san-csr.pem \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-reqexts&lt;&#x2F;span&gt;&lt;span&gt; SAN \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-config &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;openssl&#x2F;openssl.cnf \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[SAN]\nsubjectAltName=DNS:one.dev.test,DNS:two.dev.test\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  )&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While this is how you add SANs to a self signed key or a CSR you send to a
public CA, there is unfortunately a &lt;a href=&quot;https:&#x2F;&#x2F;www.openssl.org&#x2F;docs&#x2F;manmaster&#x2F;man1&#x2F;x509.html#BUGS&quot;&gt;bug in the x509 command&lt;&#x2F;a&gt;
that means extensions are not passed from certificate requests to certificates.
For our purposes if we want SANs we&#x27;re going to have to add them when we sign
the CSR.&lt;&#x2F;p&gt;
&lt;p&gt;First, our basic certificate with no SANs. For more information about the
extensions used see the &lt;a href=&quot;https:&#x2F;&#x2F;www.openssl.org&#x2F;docs&#x2F;manmaster&#x2F;man5&#x2F;x509v3_config.html&quot;&gt;openssl x509 config docs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x509&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-req -in&lt;&#x2F;span&gt;&lt;span&gt; test-server-static-csr.pem \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-passin&lt;&#x2F;span&gt;&lt;span&gt; pass:capassword \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-CA&lt;&#x2F;span&gt;&lt;span&gt; test-ca.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAkey&lt;&#x2F;span&gt;&lt;span&gt; test-ca.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAcreateserial&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-out&lt;&#x2F;span&gt;&lt;span&gt; test-server-static-cert.pem \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-days&lt;&#x2F;span&gt;&lt;span&gt; 1825&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -sha256&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-extfile &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;subjectKeyIdentifier=hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;authorityKeyIdentifier=keyid,issuer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;basicConstraints=CA:FALSE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keyUsage=digitalSignature,keyEncipherment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the SANs it is almost identical but with the &lt;code&gt;subjectAltName&lt;&#x2F;code&gt; extension.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x509&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-req -in&lt;&#x2F;span&gt;&lt;span&gt; test-server-static-csr.pem \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-passin&lt;&#x2F;span&gt;&lt;span&gt; pass:capassword \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-CA&lt;&#x2F;span&gt;&lt;span&gt; test-ca.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAkey&lt;&#x2F;span&gt;&lt;span&gt; test-ca.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAcreateserial&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-out&lt;&#x2F;span&gt;&lt;span&gt; test-server-san-cert.pem \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-days&lt;&#x2F;span&gt;&lt;span&gt; 1825&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -sha256&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-extfile &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;subjectKeyIdentifier=hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;authorityKeyIdentifier=keyid,issuer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;basicConstraints=CA:FALSE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keyUsage=digitalSignature,keyEncipherment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;subjectAltName=DNS:one.dev.test,DNS:two.dev.test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We now have a CA certificate and a couple of server certificates signed by
that CA. It&#x27;s time to test them out.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;test-with-nginx-and-curl&quot;&gt;Test with Nginx and Curl&lt;&#x2F;h2&gt;
&lt;p&gt;First let&#x27;s spin up an Nginx docker container with our static certificate
and server key. We&#x27;re going to use a minimal ssl configuration, in real life
you&#x27;re going to want something &lt;a href=&quot;https:&#x2F;&#x2F;wiki.mozilla.org&#x2F;Security&#x2F;TLS_Configurations#Nginx&quot;&gt;much more robust&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;nginx.vhost.conf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nginx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nginx &quot;&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span&gt;server {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  listen 443 ssl;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  server_name dev.test;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;certs&#x2F;server-crt.pem;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;private&#x2F;server.key;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  location &#x2F; {&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    return 200 &amp;#39;Static vhost test\n&amp;#39;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Content-Type text&#x2F;plain;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; docker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--rm -p&lt;&#x2F;span&gt;&lt;span&gt; 443:443 \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;nginx.vhost.conf:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf:ro \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;test-server.key:&#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;private&#x2F;server.key:ro \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;test-server-static-cert.pem:&#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;certs&#x2F;server-crt.pem:ro \&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before we finally test this we&#x27;re going to need &lt;code&gt;dev.test&lt;&#x2F;code&gt; to point to &lt;code&gt;127.0.0.1&lt;&#x2F;code&gt;.
If we were just testing with cur we could make use of the &lt;a href=&quot;https:&#x2F;&#x2F;curl.haxx.se&#x2F;docs&#x2F;manpage.html#--resolve&quot;&gt;&lt;code&gt;--resolve&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
option to manually resolve. However, we also want this to work in a browser
so let&#x27;s add it to our hosts file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1 dev.test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &#x2F;etc&#x2F;hosts&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally we&#x27;re able test our certificate!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--cacert&lt;&#x2F;span&gt;&lt;span&gt; test-ca.pem https:&#x2F;&#x2F;dev.test&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Static&lt;&#x2F;span&gt;&lt;span&gt; vhost test&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;install-the-certificate-authority&quot;&gt;Install the certificate authority&lt;&#x2F;h2&gt;
&lt;p&gt;In order to test this in a browser we need to install the CA certificate. This
process varies between different platforms and can be tempremental (which is
one of the reasons &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;mkcert&quot;&gt;mkcert&lt;&#x2F;a&gt; is so great).
To make my life easier I&#x27;m going to describe adding the CA certificate to
Firefox as it allows you to manage your authorities from it&#x27;s own preferences.&lt;&#x2F;p&gt;
&lt;p&gt;First open your Firefox &amp;quot;Preferences&amp;quot;. Select &amp;quot;Privacy &amp;amp; Security&amp;quot;. Scroll all
the way to the bottom and click &amp;quot;View Certificates&amp;quot;. Here we want to click the
tab called &amp;quot;Authorities&amp;quot; and then click &amp;quot;Import&amp;quot;. Select our &lt;code&gt;test-ca.pem&lt;&#x2F;code&gt; and
import.&lt;&#x2F;p&gt;
&lt;p&gt;You should now be able to visit &lt;a href=&quot;https:&#x2F;&#x2F;dev.test&quot;&gt;https:&#x2F;&#x2F;dev.test&lt;&#x2F;a&gt; in Firefox
and see &amp;quot;Static vhost test&amp;quot; displayed. And we&#x27;re done!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;&#x2F;h2&gt;
&lt;p&gt;This has been a bit of a monster post but we now have a CA certificate installed
in our browser, a process for creating signed server certificates and a web
server that tests this out, all created with easily scriptable commands. In
the next post we&#x27;ll create client certificates to identify ourselves with our
servers.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Managing multiple GitHub accounts</title>
		<published>2018-07-18T00:00:00+00:00</published>
		<updated>2018-07-18T00:00:00+00:00</updated>
		<link href="https://robyoung.digital/blog/multiple-github-accounts/" type="text/html"/>
		<id>https://robyoung.digital/blog/multiple-github-accounts/</id>
		<content type="html">&lt;p&gt;Authenticating correctly over SSH with multiple GitHub accounts can be a pain.
Here is how I manage it.&lt;&#x2F;p&gt;
&lt;p&gt;Before we start, why might you need multiple GitHub accounts at all? I
first came across the need when the permission requirements to log in to a
client&#x27;s Jenkins asked for full read and write access to all my public and
private repositories. This was not needed but getting it changed was
going to be hard. Creating a separate work GitHub account solved the problem.&lt;&#x2F;p&gt;
&lt;p&gt;GitHub will not allow you to use the same SSH key for more than one account
because it would not be able to figure out which user to authenticate as.
As a result I needed to create a new SSH key pair for the new account and
upload that. However, then I had the problem that two SSH keys were both valid
for github. When I tried to use git, SSH tried the available keys until it found
one that worked and GitHub authenticated with that. There was no guarantee that
this was the correct one.&lt;&#x2F;p&gt;
&lt;p&gt;The way I got around the problem was to set up two sections in my &lt;code&gt;.ssh&#x2F;config&lt;&#x2F;code&gt;,
each offering a different key and then change the host name on the work git
repositories to force them to use the work key.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ssh-config&quot;&gt;&lt;code&gt;.ssh&#x2F;config&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;config&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-config &quot;&gt;&lt;code class=&quot;language-config&quot; data-lang=&quot;config&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Host &lt;&#x2F;span&gt;&lt;span&gt;github.com&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IdentityFile &lt;&#x2F;span&gt;&lt;span&gt;~&#x2F;.ssh&#x2F;personal-ssh-key&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Host &lt;&#x2F;span&gt;&lt;span&gt;github-work&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hostname &lt;&#x2F;span&gt;&lt;span&gt;github.com&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IdentityFile &lt;&#x2F;span&gt;&lt;span&gt;~&#x2F;.ssh&#x2F;work-ssh-key&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;update-origin-host&quot;&gt;update origin host&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; git &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config --replace-all&lt;&#x2F;span&gt;&lt;span&gt; remote.origin.url $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; config remote.origin.url | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sed &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s&#x2F;github.com&#x2F;github-work&#x2F;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
</feed>
