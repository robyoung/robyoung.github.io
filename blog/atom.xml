<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title> - posts</title>
	<link href="https://robyoung.digital/blog/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://robyoung.digital/blog/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-08-26T00:00:00+00:00</updated>
	<id>https://robyoung.digital/blog/atom.xml</id>
	<entry xml:lang="en">
		<title>First steps with Embedded Rust: Selecting a board</title>
		<published>2021-08-26T00:00:00+00:00</published>
		<updated>2021-08-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://robyoung.digital/blog/embedded-rust-selecting-a-board/" type="text/html"/>
		<id>https://robyoung.digital/blog/embedded-rust-selecting-a-board/</id>
		<content type="html">&lt;h1 id=&quot;selecting-a-board&quot;&gt;Selecting a board&lt;&#x2F;h1&gt;
&lt;p&gt;There are a bewildering array of microcontrollers out there and an equally bewildering
array of exciting projects going on in the embedded Rust world. So, how do I know where
to start?&lt;&#x2F;p&gt;
&lt;p&gt;I have tried to focus on things I think are most important to someone with very little 
embedded experience. That may not fit you exactly. I will try to point out adjacent 
options as I go so please don’t stop reading just yet.&lt;&#x2F;p&gt;
&lt;p&gt;If you just want to be told what to buy you can skip
&lt;a href=&quot;https:&#x2F;&#x2F;robyoung.digital&#x2F;blog&#x2F;embedded-rust-selecting-a-board&#x2F;#what-board-should-i-get&quot;&gt;straight to the end&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-do-we-want-in-a-development-board&quot;&gt;What do we want in a development board?&lt;&#x2F;h2&gt;
&lt;p&gt;So, what do we actually want in a development board? I’ve tried to order the criteria 
in a way that allows us to whittle down our options as we go.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Good architecture support&lt;&#x2F;li&gt;
&lt;li&gt;Good chip support&lt;&#x2F;li&gt;
&lt;li&gt;An active community&lt;&#x2F;li&gt;
&lt;li&gt;Built in debugger&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-architecture-should-i-get&quot;&gt;What architecture should I get?&lt;&#x2F;h2&gt;
&lt;p&gt;The architecture with the most complete libraries, most thorough guides and the largest 
community around it is ARM Cortex-M. ARM Cortex-M are low power, low cost processors 
aimed at microcontroller applications. Looking at downloads on crates.io is not a 
perfect metric but it gives an idea of the difference in scale. In the last 90 days the 
cortex-m crate had over 250k downloads. The largest architecture crates for RISC-V, AVR, 
or Xtensa had at most 3k downloads and the cortex-a crate had about 18k downloads. ARM 
Cortex-M is in a league of its own.&lt;&#x2F;p&gt;
&lt;p&gt;Before we zoom off down ARM Cortex-M boulevard let&#x27;s take a quick look sideways at the 
architectures we&#x27;re leaving behind.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;avr&quot;&gt;AVR&lt;&#x2F;h3&gt;
&lt;p&gt;AVR is a family of 8-bit microcontrollers mainly used in embedded systems. Thanks to 
Arduino there are a lot of AVR development boards out there and lots of support for them 
outside of Rust. Within the Rust ecosystem they are not as well supported. Until 
recently you needed to use a fork of rustc to build for AVR. There are a couple of 
different options now and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;avr-rust&#x2F;awesome-avr-rust&quot;&gt;awesome-avr-rust&lt;&#x2F;a&gt;
is a good place to start.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;arm-cortex-a&quot;&gt;ARM Cortex-A&lt;&#x2F;h3&gt;


 

&lt;div class=&quot;image&quot; style=&quot;float: left&quot;&gt;
  

  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;robyoung.digital&amp;#x2F;processed_images&amp;#x2F;4d77b6dfc808245600.png&quot; alt=&quot;ARM logo&quot;&gt;

  

  

  
&lt;&#x2F;div&gt;
&lt;p&gt;These are bigger, beefier multi-core ARM processors designed for running bigger things. 
You would usually run a full operating system on them. For example; this is the 
architecture used in most smartphones and handheld games consoles. Check out the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cortex-a&quot;&gt;cortex-a&lt;&#x2F;a&gt;
crate for more info.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;risc-v&quot;&gt;RISC-V&lt;&#x2F;h3&gt;


 

&lt;div class=&quot;image&quot; style=&quot;float: left&quot;&gt;
  

  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;robyoung.digital&amp;#x2F;processed_images&amp;#x2F;5582465323d598ab00.png&quot; alt=&quot;RISC-V logo&quot;&gt;

  

  

  
&lt;&#x2F;div&gt;
&lt;p&gt;This seems to be the new hotness when it comes to machine architectures. It is a free 
and open Instruction Set Architecture (ISA). It has also been designed from outset to 
be modular. This means chip designers can create a wide variety of specialised chips. 
Although at the moment the range of development boards is small. There is an active 
Rust RISC-V community so it&#x27;s worth keeping an eye on. If you’re interested in learning 
more, &lt;a href=&quot;https:&#x2F;&#x2F;www.sifive.com&#x2F;why&quot;&gt;SiFive&lt;&#x2F;a&gt; or &lt;a href=&quot;www.riscv.org&quot;&gt;www.riscv.org&lt;&#x2F;a&gt; are both 
great places to start. In terms of Rust check out the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;riscv&quot;&gt;riscv&lt;&#x2F;a&gt;
crate.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xtensa&quot;&gt;Xtensa&lt;&#x2F;h3&gt;
&lt;p&gt;The most popular group of boards here are the 
&lt;a href=&quot;https:&#x2F;&#x2F;www.espressif.com&#x2F;en&#x2F;products&#x2F;devkits&quot;&gt;ESP32&lt;&#x2F;a&gt; family of chips from Espressif. 
They are small, cheap, WiFi enabled boards. They are great. It should be noted that 
not all ESP32 boards use Xtensa chips, the new &lt;a href=&quot;https:&#x2F;&#x2F;hackaday.com&#x2F;2021&#x2F;02&#x2F;08&#x2F;hands-on-the-risc-v-esp32-c3-will-be-your-new-esp8266&#x2F;&quot;&gt;ESP32-C3&lt;&#x2F;a&gt;
is RISC-V based. Probably the biggest hurdle to using Rust on Xtensa chips is that it’s 
not supported by llvm so you need to build the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;esp-rs&#x2F;rust&quot;&gt;esp-rs fork of rust&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-chip-should-i-get&quot;&gt;What chip should I get?&lt;&#x2F;h2&gt;
&lt;p&gt;So, we’re going to use an ARM Cortex-M. That narrows down our search but there are still 
a lot of options. If we go through the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cortex-m&#x2F;reverse_dependencies&quot;&gt;cortex-m crate’s dependants&lt;&#x2F;a&gt;
we’ll see that there are two groups of chips used more than any others; the &lt;a href=&quot;https:&#x2F;&#x2F;www.st.com&#x2F;content&#x2F;st_com&#x2F;en&#x2F;products&#x2F;microcontrollers-microprocessors&#x2F;stm32-32-bit-arm-cortex-mcus.html&quot;&gt;STM32 series&lt;&#x2F;a&gt;
of chips and the &lt;a href=&quot;https:&#x2F;&#x2F;www.nordicsemi.com&#x2F;Products&#x2F;Bluetooth-Low-Energy&quot;&gt;nRF5 series&lt;&#x2F;a&gt;, this 
is where we’re going to focus the search.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stm32&quot;&gt;STM32&lt;&#x2F;h3&gt;
&lt;p&gt;The STM32 series of chips are probably the most widely used ARM Cortex-M chips for 
embedded rust. There are a lot of chips in the stm32 family and they have long and 
incomprehensible names like STM32F401CCU6. If you’re interested there is 
&lt;a href=&quot;https:&#x2F;&#x2F;www.digikey.com&#x2F;en&#x2F;maker&#x2F;blogs&#x2F;2020&#x2F;understanding-stm32-naming-conventions&quot;&gt;a guide to understanding the naming convention&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;The STM32 &lt;a href=&quot;https:&#x2F;&#x2F;docs.rust-embedded.org&#x2F;book&#x2F;appendix&#x2F;glossary.html#pac&quot;&gt;Peripheral Access Crates (PAC)&lt;&#x2F;a&gt;
are defined in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;stm32-rs&#x2F;stm32-rs&quot;&gt;stm32-rs&#x2F;stm32-rs&lt;&#x2F;a&gt;
repo and you can find various &lt;a href=&quot;https:&#x2F;&#x2F;docs.rust-embedded.org&#x2F;book&#x2F;appendix&#x2F;glossary.html#hal&quot;&gt;Hardware Abstraction Layer (HAL)&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;docs.rust-embedded.org&#x2F;book&#x2F;appendix&#x2F;glossary.html#bsp&quot;&gt;Board Support (BSP)&lt;&#x2F;a&gt;
crates in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;stm32-rs&quot;&gt;stm32-rs&lt;&#x2F;a&gt; GitHub organisation.&lt;&#x2F;p&gt;
&lt;p&gt;There is a chat room for discussion on all STM32 chips at &lt;a href=&quot;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;#stm32-rs:matrix.org&quot;&gt;#stm32-rs:matrix.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;


 

&lt;div class=&quot;image&quot; style=&quot;float: left&quot;&gt;
  
  &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;stm32-base.org&amp;#x2F;boards&amp;#x2F;STM32F103C8T6-Black-Pill.html&quot;&gt;
  

  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;robyoung.digital&amp;#x2F;processed_images&amp;#x2F;61c1d1dc273ae31f00.jpg&quot; alt=&quot;Black Pill&quot;&gt;

  
  &lt;p&gt;Black Pill&lt;&#x2F;p&gt;
  

  
  &lt;p&gt;Source: stm32-base.org
  

  
  &lt;&#x2F;a&gt;
  
&lt;&#x2F;div&gt;
&lt;p&gt;Two of the most popular STM32 boards are the &lt;a href=&quot;https:&#x2F;&#x2F;stm32-base.org&#x2F;boards&#x2F;STM32F103C8T6-Blue-Pill&quot;&gt;Blue Pill&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;stm32-base.org&#x2F;boards&#x2F;STM32F103C8T6-Black-Pill&quot;&gt;Black Pill&lt;&#x2F;a&gt;. There are a 
bunch of blogs about using them with rust. The main downside is that they do not come 
with an on board debugger. And for that reason alone I think they make a great second 
board.&lt;&#x2F;p&gt;


 

&lt;div class=&quot;image&quot; style=&quot;float: right&quot;&gt;
  
  &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;www.st.com&amp;#x2F;en&amp;#x2F;evaluation-tools&amp;#x2F;stm32f3discovery.html&quot;&gt;
  

  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;robyoung.digital&amp;#x2F;processed_images&amp;#x2F;8a6c3d564a5609a100.jpg&quot; alt=&quot;STM32F3 Discovery&quot;&gt;

  
  &lt;p&gt;STM32F3 Discovery&lt;&#x2F;p&gt;
  

  
  &lt;p&gt;Source: st.com
  

  
  &lt;&#x2F;a&gt;
  
&lt;&#x2F;div&gt;
&lt;p&gt;If you want an STM32 based board with a debugger then getting one of the official 
&lt;a href=&quot;https:&#x2F;&#x2F;www.st.com&#x2F;en&#x2F;evaluation-tools&#x2F;stm32-discovery-kits.html&quot;&gt;STMicroelectronics discovery kits&lt;&#x2F;a&gt;
is a great option (an STM32F3 or STM32F4 are good bets). The original version of the 
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rust-embedded.org&#x2F;discovery&#x2F;&quot;&gt;Rust Embedded Discovery book&lt;&#x2F;a&gt; is written 
targeting the STM32F3 discovery board so there is really high quality beginner focused 
documentation. If you go for a discovery board I would definitely start there.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nrf5&quot;&gt;nRF5&lt;&#x2F;h3&gt;
&lt;p&gt;The second most widely used family of ARM Cortex-M chips for embedded rust is the 
&lt;a href=&quot;https:&#x2F;&#x2F;www.nordicsemi.com&#x2F;Products&#x2F;Bluetooth-Low-Energy&quot;&gt;nRF5 series&lt;&#x2F;a&gt; from Nordic 
Semiconductor. The PACs are defined in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nrf-rs&#x2F;nrf-pacs&quot;&gt;nrf-rs&#x2F;nrf-pacs&lt;&#x2F;a&gt; 
repo, the HALs are defined in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nrf-rs&#x2F;nrf-hal&quot;&gt;nrf-rs&#x2F;nrf-hal&lt;&#x2F;a&gt; 
and there are various BSPs in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nrf-rs&quot;&gt;nrf-rs&lt;&#x2F;a&gt; organisation. 
There is a chat room for discussion on all nRF chips at &lt;a href=&quot;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;#nrf-rs:matrix.org&quot;&gt;#nrf-rs:matrix.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;


 

&lt;div class=&quot;image&quot; style=&quot;float: left&quot;&gt;
  
  &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;www.nordicsemi.com&amp;#x2F;Products&amp;#x2F;Development-hardware&amp;#x2F;nRF52840-DK&quot;&gt;
  

  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;robyoung.digital&amp;#x2F;processed_images&amp;#x2F;15c2819338bb5d6e00.jpg&quot; alt=&quot;nRF52840 Development Kit&quot;&gt;

  
  &lt;p&gt;nRF52840 Development Kit&lt;&#x2F;p&gt;
  

  
  &lt;p&gt;Source: nordicsemi.com
  

  
  &lt;&#x2F;a&gt;
  
&lt;&#x2F;div&gt;
&lt;p&gt;The official &lt;a href=&quot;https:&#x2F;&#x2F;www.nordicsemi.com&#x2F;Products&#x2F;Bluetooth-Low-Energy&#x2F;Development-hardware&quot;&gt;development kits&lt;&#x2F;a&gt; 
(DK) are great first boards. The &lt;a href=&quot;https:&#x2F;&#x2F;knurling.ferrous-systems.com&#x2F;sessions&#x2F;&quot;&gt;knurling-rs sessions&lt;&#x2F;a&gt; 
from Ferrous Systems use the &lt;a href=&quot;https:&#x2F;&#x2F;www.nordicsemi.com&#x2F;Products&#x2F;Development-hardware&#x2F;nRF52840-DK&quot;&gt;nRF52840 Development Kit&lt;&#x2F;a&gt;.
The knurling sessions are really high quality, hands on guides that teach you embedded 
rust with interesting, fun projects. I think that right now, they are the best entry 
point to embedded development with rust. The one challenge I had was the space required. 
I live in an apartment with my partner and a toddler. I do not have the space to safely 
leave a project with lots of wires and small components lying around, and I only have 
free time for a couple of hours in the evening. I found myself constantly packing things 
up and setting them up again to make a tiny amount of progress.&lt;&#x2F;p&gt;


 

&lt;div class=&quot;image&quot; style=&quot;float: right&quot;&gt;
  
  &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;www.microbit.org&amp;#x2F;&quot;&gt;
  

  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;robyoung.digital&amp;#x2F;processed_images&amp;#x2F;482749b30ac84a9b00.png&quot; alt=&quot;BBC micro:bit V2&quot;&gt;

  
  &lt;p&gt;BBC micro:bit V2&lt;&#x2F;p&gt;
  

  
  &lt;p&gt;Source: microbit.org
  

  
  &lt;&#x2F;a&gt;
  
&lt;&#x2F;div&gt;
&lt;p&gt;Another great nRF based development board is the &lt;a href=&quot;https:&#x2F;&#x2F;www.microbit.org&#x2F;&quot;&gt;BBC micro:bit&lt;&#x2F;a&gt;.
It comes with an on board debugger and a bunch of fun on board peripherals like an LED 
display, buttons and sensors all on the board. The BBC micro:bit is designed as an 
educational platform so the hardware is documented in a really beginner friendly way on 
their &lt;a href=&quot;https:&#x2F;&#x2F;tech.microbit.org&#x2F;&quot;&gt;developer community&lt;&#x2F;a&gt; and there are loads of project 
ideas around the internet (albeit in languages other than Rust). Check out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nrf-rs&#x2F;microbit&#x2F;tree&#x2F;main&#x2F;examples&quot;&gt;examples in the micro:bit BSP&lt;&#x2F;a&gt; 
for some idea of what you can do. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;rp2040&quot;&gt;RP2040&lt;&#x2F;h3&gt;
&lt;p&gt;The last chip we’re going to look at is a bit of a curveball. The &lt;a href=&quot;https:&#x2F;&#x2F;www.raspberrypi.org&#x2F;documentation&#x2F;rp2040&#x2F;getting-started&#x2F;&quot;&gt;RP2040&lt;&#x2F;a&gt;,
released at the end of 2020, is the Raspberry Pi Foundation’s first foray into designing 
their own silicon. Being so new, Rust support for it is still very much in development. 
You can find the PAC, the HAL and a bunch of supporting tools in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rp-rs&quot;&gt;rp-rs&lt;&#x2F;a&gt; 
organisation on GitHub. There is a chat room dedicated to the RP2040 at &lt;a href=&quot;https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;#rp-rs:matrix.org&quot;&gt;#rp-rs:matrix.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;


 

&lt;div class=&quot;image&quot; style=&quot;float: left&quot;&gt;
  
  &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;www.raspberrypi.org&amp;#x2F;documentation&amp;#x2F;rp2040&amp;#x2F;getting-started&amp;#x2F;&quot;&gt;
  

  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;robyoung.digital&amp;#x2F;processed_images&amp;#x2F;9d3bec7f2ff56e2100.png&quot; alt=&quot;Raspberry Pi Pico&quot;&gt;

  
  &lt;p&gt;Raspberry Pi Pico&lt;&#x2F;p&gt;
  

  
  &lt;p&gt;Source: raspberrypi.org
  

  
  &lt;&#x2F;a&gt;
  
&lt;&#x2F;div&gt;
&lt;p&gt;Like the BBC micro:bit the RP2040 is geared towards being an educational platform so the 
hardware documentation is first class and there are loads of beginner friendly code 
examples and libraries in other programming languages. That said there isn’t much 
beginner friendly documentation for Embedded Rust on the RP2040. This is a really 
exciting platform and there is a huge amount of activity around it in the Embedded Rust 
community so definitely keep an eye on it, but it probably isn’t ideal as your first board.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-the-fuss-about-an-on-board-debugger&quot;&gt;What’s the fuss about an on board debugger?&lt;&#x2F;h2&gt;
&lt;p&gt;When you run a program on your host machine you can easily run it in your shell and see 
printed output. This is more difficult on an embedded target. You can make an LED flash 
but there is no terminal. A debugger fills this gap. As well as allowing you to do step 
through, breakpoint debugging, it allows you to load programs onto your device and 
easily see output. A debugger is a really useful tool for embedded development.&lt;&#x2F;p&gt;
&lt;p&gt;There is a catch though. It is usually a separate device that you connect to your host 
and then wire up to your target device. When you’re first starting out this is a not 
inconsiderable expense and yet another thing that you will have to set up correctly. 
Luckily some devices come with a built-in debugger. With these devices you should be 
able to plug them straight into your host and probe-run your code in a flash. (There is 
usually a bit of setup needed on your host to get the debugger working, ferrous have a 
&lt;a href=&quot;https:&#x2F;&#x2F;session20q4.ferrous-systems.com&#x2F;sessions&#x2F;installation.html&quot;&gt;good setup guide&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-board-should-i-get&quot;&gt;What board should I get?&lt;&#x2F;h2&gt;
&lt;p&gt;All these boards have great HAL and BSP crates, active friendly communities, and an on 
board debugger.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href=&quot;https:&#x2F;&#x2F;www.microbit.org&#x2F;&quot;&gt;BBC micro:bit&lt;&#x2F;a&gt; (about £13); it is the board used in the new version of the Rust Embedded Discovery book.&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;a href=&quot;https:&#x2F;&#x2F;www.nordicsemi.com&#x2F;Products&#x2F;Development-hardware&#x2F;nRF52840-DK&quot;&gt;nRF52840 Development Kit&lt;&#x2F;a&gt; (about £35); it is the board used in the Knurling Sessions and training by Ferrous Systems.&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;a href=&quot;https:&#x2F;&#x2F;www.st.com&#x2F;en&#x2F;evaluation-tools&#x2F;stm32f3discovery.html&quot;&gt;STM32F3 Discovery Kit&lt;&#x2F;a&gt; (about £14); it is the board used in the first version of the Rust Embedded Discovery book.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;and-keep-an-eye-on&quot;&gt;And keep an eye on&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.raspberrypi.org&#x2F;products&#x2F;raspberry-pi-pico&#x2F;&quot;&gt;Raspberry Pi Pico&lt;&#x2F;a&gt; (about £6 with pre-soldered pins); ARM Cortex-M but no built in debugger and the HAL is still a work in progress. On the other hand, there is a lot of activity on it at the moment and things are moving fast.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sifive.com&#x2F;boards&#x2F;hifive1-rev-b&quot;&gt;HiFive1 Rev B&lt;&#x2F;a&gt; (about £50); RISC-V is the new hotness. There seems to be a lot of activity around it in Rust however it does not yet have the support that ARM Cortex-M has right now. Other boards to keep an eye on here are the &lt;a href=&quot;https:&#x2F;&#x2F;longan.sipeed.com&#x2F;en&#x2F;&quot;&gt;Logan Nano&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;hackaday.com&#x2F;2021&#x2F;02&#x2F;08&#x2F;hands-on-the-risc-v-esp32-c3-will-be-your-new-esp8266&#x2F;&quot;&gt;ESP32-C3&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Create your own certificate authority with openssl - part two</title>
		<published>2020-01-15T00:00:00+00:00</published>
		<updated>2020-01-15T00:00:00+00:00</updated>
		<link rel="alternate" href="https://robyoung.digital/blog/ssl-certificate-authority-with-openssl-part-two/" type="text/html"/>
		<id>https://robyoung.digital/blog/ssl-certificate-authority-with-openssl-part-two/</id>
		<content type="html">&lt;p&gt;In the &lt;a href=&quot;&#x2F;blog&#x2F;ssl-certificate-authority-with-openssl&#x2F;&quot;&gt;previous post&lt;&#x2F;a&gt; we
set up certificate authority (CA), installed a CA certificate in our browser and
went through the process of signing and using some server certificates. In this
we&#x27;ll create some client certificates to identify ourselves with our servers.
We&#x27;ll then explore using these in a few different contexts; installing them in
our browser, using them with curl and also with &lt;a href=&quot;http:&#x2F;&#x2F;www.dest-unreach.org&#x2F;socat&#x2F;&quot;&gt;socat&lt;&#x2F;a&gt;.
As with the previous post, you can see it all tied together in this related
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robyoung&#x2F;nginx-client-certs&quot;&gt;github repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This post assumes you have the files generated in the &lt;a href=&quot;&#x2F;blog&#x2F;ssl-certificate-authority-with-openssl&#x2F;&quot;&gt;previous post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;File name&lt;&#x2F;th&gt;&lt;th&gt;Use&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;test-ca.key&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;private key for the CA&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;test-ca.pem&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;root certificate (CA)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;test-server.key&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;private key for the server certificate&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;test-server-*-csr.pem&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;certificate signing requests for server&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;test-server-static-cert.pem&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;static server certificate&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;create-a-client-certificate&quot;&gt;Create a client certificate&lt;&#x2F;h2&gt;
&lt;p&gt;Compared to creating a server certificate, which has lots of options, creating a client
certificate is pretty easy. First we create the private key. Note that if you want the
user to have to provide a password to use this client cert you just need to create a
passworded key and then use &lt;code&gt;passin&lt;&#x2F;code&gt; and &lt;code&gt;passout&lt;&#x2F;code&gt; when converting to PKCS later.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;genrsa -out&lt;&#x2F;span&gt;&lt;span&gt; test-client.key 2048
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we create our certificate signing request. Our subject can be pretty empty for a client
cert.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req -new &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -subj &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;C=GB&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -key&lt;&#x2F;span&gt;&lt;span&gt; test-client.key \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -out&lt;&#x2F;span&gt;&lt;span&gt; test-client.csr
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we create our signed client certificate.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x509 &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -req -in&lt;&#x2F;span&gt;&lt;span&gt; test-client.csr \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -passin&lt;&#x2F;span&gt;&lt;span&gt; pass:capassword \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -CA&lt;&#x2F;span&gt;&lt;span&gt; test-ca.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAkey&lt;&#x2F;span&gt;&lt;span&gt; test-ca.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAcreateserial &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -out&lt;&#x2F;span&gt;&lt;span&gt; test-client.crt \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -days&lt;&#x2F;span&gt;&lt;span&gt; 1825&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -sha256
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to use this client certificate in a browser we need to convert it to PKCS.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pkcs12 -export -clcerts &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -in&lt;&#x2F;span&gt;&lt;span&gt; test-client.crt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -inkey&lt;&#x2F;span&gt;&lt;span&gt; test-client.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -out&lt;&#x2F;span&gt;&lt;span&gt; test-client.p12
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The steps to install it in the browser depend on the browser you&#x27;re using. For Firefox
you scroll right to the bottom of the Privacy &amp;amp; Security tab of Preferences. Here click
on View Certificates then Your Certificates and finally Import your .p12 file.&lt;&#x2F;p&gt;
&lt;p&gt;Using the certificate with curl and socat is much simpler. We just need a combined PEM
including the key, certificate and CA certificate.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test-client.key&lt;&#x2F;span&gt;&lt;span&gt; test-client.crt test-ca.pem &amp;gt; test-client.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then this can then be used with curl&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--cacert&lt;&#x2F;span&gt;&lt;span&gt; test-ca.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --cert&lt;&#x2F;span&gt;&lt;span&gt; test-client.pem http:&#x2F;&#x2F;dev.test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or with socat&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; socat \
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tcp-listen:8096,fork,bind&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1 &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;openssl-connect:dev.test:443,cert&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-client.pem,cafile=test-ca.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;validating-the-client-certificate&quot;&gt;Validating the client certificate&lt;&#x2F;h2&gt;
&lt;p&gt;So far we&#x27;ve created a client certificate and seen how we can use it to talk to
a server. In order to be useful though, this needs to be validated by the server.&lt;&#x2F;p&gt;
&lt;p&gt;Let us extend the &lt;code&gt;nginx.vhost.conf&lt;&#x2F;code&gt; from the previous post. The relevant
options are
&lt;a href=&quot;https:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;http&#x2F;ngx_http_ssl_module.html#ssl_client_certificate&quot;&gt;&lt;code&gt;ssl_client_certificate&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; or
&lt;a href=&quot;https:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;http&#x2F;ngx_http_ssl_module.html#ssl_trusted_certificate&quot;&gt;&lt;code&gt;ssl_trusted_certificate&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;http&#x2F;ngx_http_ssl_module.html#ssl_verify_client&quot;&gt;&lt;code&gt;ssl_verify_client&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;nginx.vhost.conf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nginx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nginx &quot;&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;listen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;443&lt;&#x2F;span&gt;&lt;span&gt; ssl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;server_name&lt;&#x2F;span&gt;&lt;span&gt; dev.test;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ssl_client_certificate&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;certs&#x2F;test-ca.pem;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ssl_verify_client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt; on&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ssl_certificate&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;certs&#x2F;server-crt.pem;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ssl_certificate_key&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;private&#x2F;server.key;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;location &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;200 &amp;#39;Static vhost test\n&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add_header&lt;&#x2F;span&gt;&lt;span&gt; Content-Type text&#x2F;plain;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here is the docker command to run it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; docker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  --rm -p&lt;&#x2F;span&gt;&lt;span&gt; 443:443 \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;nginx.vhost.conf:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf:ro \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;test-server.key:&#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;private&#x2F;server.key:ro \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;test-server-static-cert.pem:&#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;certs&#x2F;server-crt.pem:ro \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;test-ca.pem:&#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;certs&#x2F;test-ca.pem:ro
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nginx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, if you still have all the configuration from the previous post,
we should be able to test it out.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--cacert&lt;&#x2F;span&gt;&lt;span&gt; test-ca.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --cert&lt;&#x2F;span&gt;&lt;span&gt; test-client.pem http:&#x2F;&#x2F;dev.test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Static&lt;&#x2F;span&gt;&lt;span&gt; vhost test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or via &lt;code&gt;socat&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;localhost:8096
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Static&lt;&#x2F;span&gt;&lt;span&gt; vhost test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we&#x27;re all done!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Create your own certificate authority with openssl - part one</title>
		<published>2018-07-31T00:00:00+00:00</published>
		<updated>2018-07-31T00:00:00+00:00</updated>
		<link rel="alternate" href="https://robyoung.digital/blog/ssl-certificate-authority-with-openssl/" type="text/html"/>
		<id>https://robyoung.digital/blog/ssl-certificate-authority-with-openssl/</id>
		<content type="html">&lt;p&gt;This post is part one of a series on working with openssl to manage your
own certificate authority (CA) for a couple of different use cases. If you
just want to get a CA up and running for local development I thoroughly
recommend &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;mkcert&quot;&gt;mkcert&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this first part we&#x27;ll create a CA with openssl, install it into our browser
and test it with a local web server. Note that I&#x27;ll be providing all the
information on the command line to make it easier to script things.
To see it all tied together see this related &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robyoung&#x2F;nginx-client-certs&quot;&gt;github repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;create-a-certificate-authority-with-openssl&quot;&gt;Create a certificate authority with OpenSSL&lt;&#x2F;h2&gt;
&lt;p&gt;First we generate the private key for our CA (with a password other than
&#x27;capassword&#x27; preferably, and ensure it&#x27;s not visible in your shell history).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;genrsa -aes256 -passout&lt;&#x2F;span&gt;&lt;span&gt; pass:capassword&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -out&lt;&#x2F;span&gt;&lt;span&gt; test-ca.key 2048
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we generate the root certificate. The fields in the subject name do not
affect the certificate&#x27;s validity. They are queryable and shown when the certificate
is installed (firefox lists them by organisation) so use something that will remind you what it&#x27;s for.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req -x509 -new -nodes &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -passin&lt;&#x2F;span&gt;&lt;span&gt; pass:capassword \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -key&lt;&#x2F;span&gt;&lt;span&gt; test-ca.key \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -sha256 -days&lt;&#x2F;span&gt;&lt;span&gt; 1825 \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -subj &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;C=GB&#x2F;O=robyoung.digital&#x2F;CN=test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -out&lt;&#x2F;span&gt;&lt;span&gt; test-ca.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we&#x27;re done! Next we&#x27;re going to create a server certificate and sign it
with our shiny new CA key.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;create-a-server-certificate&quot;&gt;Create a server certificate&lt;&#x2F;h2&gt;
&lt;p&gt;As with the CA, our first step is to generate a private key for our server.
This time we don&#x27;t want a password otherwise it becomes harder to install.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;genrsa -out&lt;&#x2F;span&gt;&lt;span&gt; test-server.key 2048
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once we have a key we can generate our certificate signing request (CSR),
just like when we&#x27;re using a public CA. This time the common name
is significant as clients will use it to determine whether the server is
authorised to serve that domain.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req -new &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -subj &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;C=GB&#x2F;CN=dev.test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -key&lt;&#x2F;span&gt;&lt;span&gt; test-server.key \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -out&lt;&#x2F;span&gt;&lt;span&gt; test-server-static-csr.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you need to support multiple domains with a single server certificate you
have two options. Wildcard certificates, where you use a star (*) to match a
domain name segment or subject alternative names (SANs).&lt;&#x2F;p&gt;
&lt;p&gt;The wildcard certificate approach is pretty simple.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req -new &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -subj &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;C=GB&#x2F;CN=*.dev.test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -key&lt;&#x2F;span&gt;&lt;span&gt; test-server.key \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -out&lt;&#x2F;span&gt;&lt;span&gt; test-server-wildcard-csr.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Subject alternative names (SAN) is an x509 extension that allows you
to add multiple domains to a single certificate. It is bit more complex
to implement on the command line. This
&lt;a href=&quot;https:&#x2F;&#x2F;security.stackexchange.com&#x2F;a&#x2F;91556&quot;&gt;Stack Exchange answer&lt;&#x2F;a&gt; helped me
figure out how to do it. The path to your &lt;code&gt;openssl.cnf&lt;&#x2F;code&gt; is going to be system
dependent, on Linux it will probably be &lt;code&gt;&#x2F;etc&#x2F;ssl&#x2F;openssl.cnf&lt;&#x2F;code&gt;, however on Mac
(using a homebrew installed openssl) it is at &lt;code&gt;&#x2F;usr&#x2F;local&#x2F;etc&#x2F;openssl&#x2F;openssl.cnf&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req -new &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -subj &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;C=GB&#x2F;CN=dev.test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -key&lt;&#x2F;span&gt;&lt;span&gt; test-server.key \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -out&lt;&#x2F;span&gt;&lt;span&gt; test-server-san-csr.pem \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -reqexts&lt;&#x2F;span&gt;&lt;span&gt; SAN \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -config &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;( \
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;openssl&#x2F;openssl.cnf \
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[SAN]\nsubjectAltName=DNS:one.dev.test,DNS:two.dev.test\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) \
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While this is how you add SANs to a self signed key or a CSR you send to a
public CA, there is unfortunately a &lt;a href=&quot;https:&#x2F;&#x2F;www.openssl.org&#x2F;docs&#x2F;manmaster&#x2F;man1&#x2F;x509.html#BUGS&quot;&gt;bug in the x509 command&lt;&#x2F;a&gt;
that means extensions are not passed from certificate requests to certificates.
For our purposes if we want SANs we&#x27;re going to have to add them when we sign
the CSR.&lt;&#x2F;p&gt;
&lt;p&gt;First, our basic certificate with no SANs. For more information about the
extensions used see the &lt;a href=&quot;https:&#x2F;&#x2F;www.openssl.org&#x2F;docs&#x2F;manmaster&#x2F;man5&#x2F;x509v3_config.html&quot;&gt;openssl x509 config docs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x509 &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -req -in&lt;&#x2F;span&gt;&lt;span&gt; test-server-static-csr.pem \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -passin&lt;&#x2F;span&gt;&lt;span&gt; pass:capassword \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -CA&lt;&#x2F;span&gt;&lt;span&gt; test-ca.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAkey&lt;&#x2F;span&gt;&lt;span&gt; test-ca.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAcreateserial &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -out&lt;&#x2F;span&gt;&lt;span&gt; test-server-static-cert.pem \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -days&lt;&#x2F;span&gt;&lt;span&gt; 1825&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -sha256 &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -extfile &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;subjectKeyIdentifier=hash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;authorityKeyIdentifier=keyid,issuer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;basicConstraints=CA:FALSE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keyUsage=digitalSignature,keyEncipherment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the SANs it is almost identical but with the &lt;code&gt;subjectAltName&lt;&#x2F;code&gt; extension.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; openssl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x509 &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -req -in&lt;&#x2F;span&gt;&lt;span&gt; test-server-static-csr.pem \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -passin&lt;&#x2F;span&gt;&lt;span&gt; pass:capassword \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -CA&lt;&#x2F;span&gt;&lt;span&gt; test-ca.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAkey&lt;&#x2F;span&gt;&lt;span&gt; test-ca.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -CAcreateserial &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -out&lt;&#x2F;span&gt;&lt;span&gt; test-server-san-cert.pem \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -days&lt;&#x2F;span&gt;&lt;span&gt; 1825&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -sha256 &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -extfile &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;subjectKeyIdentifier=hash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;authorityKeyIdentifier=keyid,issuer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;basicConstraints=CA:FALSE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keyUsage=digitalSignature,keyEncipherment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;subjectAltName=DNS:one.dev.test,DNS:two.dev.test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We now have a CA certificate and a couple of server certificates signed by
that CA. It&#x27;s time to test them out.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;test-with-nginx-and-curl&quot;&gt;Test with Nginx and Curl&lt;&#x2F;h2&gt;
&lt;p&gt;First let&#x27;s spin up an Nginx docker container with our static certificate
and server key. We&#x27;re going to use a minimal ssl configuration, in real life
you&#x27;re going to want something &lt;a href=&quot;https:&#x2F;&#x2F;wiki.mozilla.org&#x2F;Security&#x2F;TLS_Configurations&quot;&gt;much more robust&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;nginx.vhost.conf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nginx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nginx &quot;&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;listen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;443&lt;&#x2F;span&gt;&lt;span&gt; ssl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;server_name&lt;&#x2F;span&gt;&lt;span&gt; dev.test;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ssl_certificate&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;certs&#x2F;server-crt.pem;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ssl_certificate_key&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;private&#x2F;server.key;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;location &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;200 &amp;#39;Static vhost test\n&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add_header&lt;&#x2F;span&gt;&lt;span&gt; Content-Type text&#x2F;plain;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; docker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  --rm -p&lt;&#x2F;span&gt;&lt;span&gt; 443:443 \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;nginx.vhost.conf:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf:ro \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;test-server.key:&#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;private&#x2F;server.key:ro \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;test-server-static-cert.pem:&#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;certs&#x2F;server-crt.pem:ro \
&lt;&#x2F;span&gt;&lt;span&gt;  nginx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before we finally test this we&#x27;re going to need &lt;code&gt;dev.test&lt;&#x2F;code&gt; to point to &lt;code&gt;127.0.0.1&lt;&#x2F;code&gt;.
If we were just testing with cur we could make use of the &lt;a href=&quot;https:&#x2F;&#x2F;curl.haxx.se&#x2F;docs&#x2F;manpage.html#--resolve&quot;&gt;&lt;code&gt;--resolve&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
option to manually resolve. However, we also want this to work in a browser
so let&#x27;s add it to our hosts file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1 dev.test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &#x2F;etc&#x2F;hosts
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally we&#x27;re able test our certificate!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--cacert&lt;&#x2F;span&gt;&lt;span&gt; test-ca.pem https:&#x2F;&#x2F;dev.test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Static&lt;&#x2F;span&gt;&lt;span&gt; vhost test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;install-the-certificate-authority&quot;&gt;Install the certificate authority&lt;&#x2F;h2&gt;
&lt;p&gt;In order to test this in a browser we need to install the CA certificate. This
process varies between different platforms and can be tempremental (which is
one of the reasons &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;mkcert&quot;&gt;mkcert&lt;&#x2F;a&gt; is so great).
To make my life easier I&#x27;m going to describe adding the CA certificate to
Firefox as it allows you to manage your authorities from it&#x27;s own preferences.&lt;&#x2F;p&gt;
&lt;p&gt;First open your Firefox &amp;quot;Preferences&amp;quot;. Select &amp;quot;Privacy &amp;amp; Security&amp;quot;. Scroll all
the way to the bottom and click &amp;quot;View Certificates&amp;quot;. Here we want to click the
tab called &amp;quot;Authorities&amp;quot; and then click &amp;quot;Import&amp;quot;. Select our &lt;code&gt;test-ca.pem&lt;&#x2F;code&gt; and
import.&lt;&#x2F;p&gt;
&lt;p&gt;You should now be able to visit &lt;a href=&quot;https:&#x2F;&#x2F;dev.test&quot;&gt;https:&#x2F;&#x2F;dev.test&lt;&#x2F;a&gt; in Firefox
and see &amp;quot;Static vhost test&amp;quot; displayed. And we&#x27;re done!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;&#x2F;h2&gt;
&lt;p&gt;This has been a bit of a monster post but we now have a CA certificate installed
in our browser, a process for creating signed server certificates and a web
server that tests this out, all created with easily scriptable commands. In
the next post we&#x27;ll create client certificates to identify ourselves with our
servers.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Managing multiple GitHub accounts</title>
		<published>2018-07-18T00:00:00+00:00</published>
		<updated>2018-07-18T00:00:00+00:00</updated>
		<link rel="alternate" href="https://robyoung.digital/blog/multiple-github-accounts/" type="text/html"/>
		<id>https://robyoung.digital/blog/multiple-github-accounts/</id>
		<content type="html">&lt;p&gt;Authenticating correctly over SSH with multiple GitHub accounts can be a pain.
Here is how I manage it.&lt;&#x2F;p&gt;
&lt;p&gt;Before we start, why might you need multiple GitHub accounts at all? I
first came across the need when the permission requirements to log in to a
client&#x27;s Jenkins asked for full read and write access to all my public and
private repositories. This was not needed but getting it changed was
going to be hard. Creating a separate work GitHub account solved the problem.&lt;&#x2F;p&gt;
&lt;p&gt;GitHub will not allow you to use the same SSH key for more than one account
because it would not be able to figure out which user to authenticate as.
As a result I needed to create a new SSH key pair for the new account and
upload that. However, then I had the problem that two SSH keys were both valid
for github. When I tried to use git, SSH tried the available keys until it found
one that worked and GitHub authenticated with that. There was no guarantee that
this was the correct one.&lt;&#x2F;p&gt;
&lt;p&gt;The way I got around the problem was to set up two sections in my &lt;code&gt;.ssh&#x2F;config&lt;&#x2F;code&gt;,
each offering a different key and then change the host name on the work git
repositories to force them to use the work key.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ssh-config&quot;&gt;&lt;code&gt;.ssh&#x2F;config&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;config&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-config &quot;&gt;&lt;code class=&quot;language-config&quot; data-lang=&quot;config&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Host &lt;&#x2F;span&gt;&lt;span&gt;github.com
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IdentityFile &lt;&#x2F;span&gt;&lt;span&gt;~&#x2F;.ssh&#x2F;personal-ssh-key
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Host &lt;&#x2F;span&gt;&lt;span&gt;github-work
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hostname &lt;&#x2F;span&gt;&lt;span&gt;github.com
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IdentityFile &lt;&#x2F;span&gt;&lt;span&gt;~&#x2F;.ssh&#x2F;work-ssh-key
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;update-origin-host&quot;&gt;update origin host&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&amp;gt; git &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config --replace-all&lt;&#x2F;span&gt;&lt;span&gt; remote.origin.url $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; config remote.origin.url | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sed &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s&#x2F;github.com&#x2F;github-work&#x2F;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
</feed>
